# -*- coding: utf-8 -*-
"""Class Activation Maps ResNet50.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16CpcQR8YaGa4MtryfDsVEQqAFJFKcxKa
"""

from keras.models import Model
from keras.applications.resnet50 import ResNet50,preprocess_input,decode_predictions
from keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt
from glob import glob 
import scipy as sp

# showing image for fun
plt.imshow(image.load_img('test.jpg'))
plt.show()

# downloading and initializing Resnet50 Model
resnet = ResNet50(input_shape=(224,224,3),weights = 'imagenet',include_top = True)

resnet.summary()

# we need the activation layer before prediction and Global Pooling which is activation_49
activation_layer = resnet.get_layer('activation_49')

# create a model object
model = Model(inputs=resnet.input,outputs= activation_layer.output)

# Now we need to get the weights of the last fully connected Layer which is fc1000
last_dense_layer = resnet.get_layer('fc1000')
weights = last_dense_layer.get_weights()[0]

# Reading and preprocessing the image for Resnet

img = image.load_img('football.jpg',target_size=(224,224))
x = preprocess_input(np.expand_dims(img,0))
# get the featuremaps frorm the model we created above 
featuremaps = model.predict(x)[0] #7x7x2048 feature map

# predict the category of input image from 1000 classes of resnet50
probs = resnet.predict(x)
classnames = decode_predictions(probs)[0]
print(classnames)

classname = classnames[0][1] #get highest probabilty score for the image
preds = np.argmax(probs[0]) # get maximum probability value along an axis
print(classname)
print(preds)

# get the 2048 weights from the resnet for the target class
w= weights[:,preds]

# perform a dot product of feature maps and weights
product = featuremaps.dot(w)

# Now upsample the image to 224,224
# 7x32= 224
product = sp.ndimage.zoom(product,(32,32),order=1)

#plotting the results
plt.subplot(1,2,1)
plt.imshow(img,alpha=0.4)
plt.imshow(product,cmap='jet',alpha=0.6)
plt.subplot(1,2,2)
plt.imshow(img)
plt.title(classname)
plt.show()

